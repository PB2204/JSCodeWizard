{
  // Basic JavaScript Template
  "Basic JavaScript Template": {
    "prefix": "jsbasic",
    "body": [
      "// Basic JavaScript Template",
      "console.log('Hello, World!');",
      "$0"
    ],
    "description": "Creates a basic JavaScript template."
  },

  // Node.js Template
  "Node.js Template": {
    "prefix": "jsnode",
    "body": [
      "// Node.js Template",
      "const http = require('http');",
      "",
      "const server = http.createServer((req, res) => {",
      "  res.writeHead(200, { 'Content-Type': 'text/plain' });",
      "  res.end('Hello, World!\\n');",
      "});",
      "",
      "server.listen(3000, 'localhost', () => {",
      "  console.log('Server running at http://localhost:3000/');",
      "});",
      "$0"
    ],
    "description": "Creates a Node.js template for server-side JavaScript development."
  },

  // HTML Web Development Template
  "HTML Web Development Template": {
    "prefix": "html",
    "body": [
      "<!-- HTML Template -->",
      "<!DOCTYPE html>",
      "<html>",
      "<head>",
      "  <title>Sample Web Page</title>",
      "</head>",
      "<body>",
      "  <h1>Hello, World!</h1>",
      "  <script src=\"script.js\"></script>",
      "</body>",
      "</html>",
      "$0"
    ],
    "description": "Creates templates for HTML, CSS, and JavaScript for front-end web development."
  },

  // CSS Template
  "CSS Template": {
    "prefix": "css",
    "body": [
      "/* CSS Template (styles.css) */",
      "body {",
      "  font-family: Arial, sans-serif;",
      "}",
      "",
      "h1 {",
      "  color: blue;",
      "}",
      "$0"
    ],
    "description": "Creates a CSS template for styling web pages."
  },

  // JavaScript Template
  "JavaScript Template (script.js)": {
    "prefix": "js",
    "body": [
      "// JavaScript Template (script.js)",
      "document.addEventListener('DOMContentLoaded', () => {",
      "  const header = document.querySelector('h1');",
      "  header.textContent = 'Hello, World!';",
      "});",
      "$0"
    ],
    "description": "Creates a JavaScript template (script.js) for handling user interactions."
  },

  // Vue.js Template
  "Vue.js Template": {
    "prefix": "vuejs",
    "body": [
      "// Vue.js Component Template",
      "<template>",
      "  <div>",
      "    <h1>Hello, World!</h1>",
      "  </div>",
      "</template>",
      "",
      "<script>",
      "export default {",
      "  name: 'MyVueComponent',",
      "  // Add Vue component options here",
      "};",
      "</script>",
      "",
      "<style scoped>",
      "/* Add scoped CSS styles here */",
      "</style>",
      "$0"
    ],
    "description": "Creates a Vue.js component template."
  },

  // Angular Template
  "Angular Template": {
    "prefix": "angular",
    "body": [
      "// Angular Component Template",
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "  selector: 'app-my-component',",
      "  template: `",
      "    <div>",
      "      <h1>Hello, World!</h1>",
      "    </div>",
      "  `,",
      "})",
      "export class MyComponent {",
      "  // Add Angular component logic here",
      "}",
      "$0"
    ],
    "description": "Creates an Angular component template."
  },

  // Express.js Template
  "Express.js Template": {
    "prefix": "express",
    "body": [
      "// Express.js API Template",
      "const express = require('express');",
      "const app = express();",
      "const port = 3000;",
      "",
      "// Define your routes and middleware here",
      "",
      "app.listen(port, () => {",
      "  console.log(`Server is running on port ${port}`);",
      "});",
      "$0"
    ],
    "description": "Creates an Express.js API template for building RESTful APIs."
  },

  // Database Interaction Template (MongoDB)
  "Database Interaction Template (MongoDB)": {
    "prefix": "mongodb",
    "body": [
      "// MongoDB Connection Template",
      "const mongoose = require('mongoose');",
      "mongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true });",
      "",
      "// Define MongoDB schema and models here",
      "$0"
    ],
    "description": "Creates a MongoDB connection template for database interaction."
  },

  // Testing Template (Mocha and Chai)
  "Testing Template (Mocha and Chai)": {
    "prefix": "mocha",
    "body": [
      "// Mocha and Chai Test Template",
      "const assert = require('chai').assert;",
      "",
      "describe('MyTestSuite', function () {",
      "  it('Test Case 1', function () {",
      "    // Test logic and assertions here",
      "    assert.equal(true, true);",
      "  });",
      "});",
      "$0"
    ],
    "description": "Creates a Mocha and Chai test template."
  },

  // Promises and Async/Await Template
  "Promises and Async/Await Template": {
    "prefix": "asyncawait",
    "body": [
      "// Promises and Async/Await Example",
      "function fetchData() {",
      "  return new Promise((resolve, reject) => {",
      "    // Asynchronous operation (e.g., fetching data)",
      "    setTimeout(() => {",
      "      const data = 'Hello, World!';",
      "      resolve(data);",
      "    }, 1000);",
      "  });",
      "}",
      "",
      "async function main() {",
      "  try {",
      "    const result = await fetchData();",
      "    console.log(result);",
      "  } catch (error) {",
      "    console.error(error);",
      "  }",
      "}",
      "",
      "main();",
      "$0"
    ],
    "description": "Creates a Promises and Async/Await example template."
  },

  // ES6/ES7 Features Template
  "ES6/ES7 Features Template": {
    "prefix": "es6features",
    "body": [
      "// ES6/ES7 Features Example",
      "const myFunction = (param1, param2) => {",
      "  const sum = param1 + param2;",
      "  return `The sum is ${sum}`;",
      "};",
      "",
      "class MyClass {",
      "  constructor(name) {",
      "    this.name = name;",
      "  }",
      "",
      "  greet() {",
      "    return `Hello, ${this.name}!`;",
      "  }",
      "}",
      "",
      "const myModule = {",
      "  myFunction,",
      "  MyClass,",
      "};",
      "$0"
    ],
    "description": "Creates an ES6/ES7 features example template."
  },

  // Popular Libraries and Frameworks Template (D3.js Example)
  "D3.js Template": {
    "prefix": "d3js",
    "body": [
      "// D3.js Template",
      "import * as d3 from 'd3';",
      "",
      "const data = [10, 20, 30, 40, 50];",
      "",
      "const svg = d3.select('body').append('svg').attr('width', 500).attr('height', 300);",
      "",
      "svg",
      "  .selectAll('rect')",
      "  .data(data)",
      "  .enter()",
      "  .append('rect')",
      "  .attr('x', (d, i) => i * 60)",
      "  .attr('y', (d) => 300 - d * 5)",
      "  .attr('width', 40)",
      "  .attr('height', (d) => d * 5)",
      "  .attr('fill', 'blue');",
      "$0"
    ],
    "description": "Creates a D3.js template for data visualization."
  },

  // React Functional Component Template
  "React Functional Component": {
    "prefix": "reactfunc",
    "body": [
      "// React Functional Component Template",
      "import React from 'react';",
      "",
      "const MyComponent = () => {",
      "  return (",
      "    <div>",
      "      <h1>Hello, World!</h1>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default MyComponent;",
      "$0"
    ],
    "description": "Creates a React functional component template."
  },

  // Redux Action Template
  "Redux Action Template": {
    "prefix": "reduxaction",
    "body": [
      "// Redux Action Template",
      "export const myAction = (payload) => {",
      "  return {",
      "    type: 'MY_ACTION',",
      "    payload,",
      "  };",
      "}",
      "$0"
    ],
    "description": "Creates a Redux action template."
  },

  // Redux Reducer Template
  "Redux Reducer Template": {
    "prefix": "reduxreducer",
    "body": [
      "// Redux Reducer Template",
      "const initialState = {",
      "  data: null,",
      "};",
      "",
      "export const myReducer = (state = initialState, action) => {",
      "  switch (action.type) {",
      "    case 'MY_ACTION':",
      "      return {",
      "        ...state,",
      "        data: action.payload,",
      "      };",
      "    default:",
      "      return state;",
      "  }",
      "}",
      "$0"
    ],
    "description": "Creates a Redux reducer template."
  },

  // Redux Store Configuration Template
  "Redux Store Configuration Template": {
    "prefix": "reduxstore",
    "body": [
      "// Redux Store Configuration Template",
      "import { createStore, combineReducers } from 'redux';",
      "import { myReducer } from './reducers';",
      "",
      "const rootReducer = combineReducers({",
      "  myReducer,",
      "});",
      "",
      "const store = createStore(rootReducer);",
      "$0"
    ],
    "description": "Creates a Redux store configuration template."
  },

  // Angular CLI Component Template
  "Angular CLI Component Template": {
    "prefix": "angularcomponent",
    "body": [
      "// Angular CLI Component Template",
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "  selector: 'app-my-component',",
      "  template: `",
      "    <div>",
      "      <h1>Hello, World!</h1>",
      "    </div>",
      "  `,",
      "})",
      "export class MyComponent {",
      "  // Add Angular component logic here",
      "}",
      "$0"
    ],
    "description": "Creates an Angular CLI component template."
  },

  // Angular CLI Service Template
  "Angular CLI Service Template": {
    "prefix": "angularservice",
    "body": [
      "// Angular CLI Service Template",
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({",
      "  providedIn: 'root',",
      "})",
      "export class MyService {",
      "  // Add Angular service logic here",
      "}",
      "$0"
    ],
    "description": "Creates an Angular CLI service template."
  },

  // GraphQL Schema Template
  "GraphQL Schema Template": {
    "prefix": "graphqlschema",
    "body": [
      "// GraphQL Schema Template",
      "const { GraphQLSchema, GraphQLObjectType, GraphQLString } = require('graphql');",
      "",
      "const RootQuery = new GraphQLObjectType({",
      "  name: 'RootQueryType',",
      "  fields: {",
      "    message: {",
      "      type: GraphQLString,",
      "      resolve: () => 'Hello, World!',",
      "    },",
      "  },",
      "});",
      "",
      "module.exports = new GraphQLSchema({",
      "  query: RootQuery,",
      "});",
      "$0"
    ],
    "description": "Creates a GraphQL schema template."
  },

  // GraphQL Resolver Template
  "GraphQL Resolver Template": {
    "prefix": "graphqlresolver",
    "body": [
      "// GraphQL Resolver Template",
      "const resolvers = {",
      "  RootQuery: {",
      "    message: () => 'Hello, World!',",
      "  },",
      "};",
      "",
      "module.exports = resolvers;",
      "$0"
    ],
    "description": "Creates a GraphQL resolver template."
  },

  // Socket.io Server Template
  "Socket.io Server Template": {
    "prefix": "socketioserver",
    "body": [
      "// Socket.io Server Template",
      "const http = require('http');",
      "const server = http.createServer();",
      "const io = require('socket.io')(server);",
      "",
      "io.on('connection', (socket) => {",
      "  console.log('A user connected');",
      "  socket.on('disconnect', () => {",
      "    console.log('A user disconnected');",
      "  });",
      "  // Add socket event handling here",
      "});",
      "",
      "server.listen(3000, () => {",
      "  console.log('Socket.io server is running on port 3000');",
      "});",
      "$0"
    ],
    "description": "Creates a Socket.io server template."
  },

  // Socket.io Client Template
  "Socket.io Client Template": {
    "prefix": "socketioclient",
    "body": [
      "// Socket.io Client Template",
      "<script src=\"/socket.io/socket.io.js\"></script>",
      "<script>",
      "  const socket = io();",
      "  socket.on('connect', () => {",
      "    console.log('Connected to the server');",
      "  });",
      "  // Add socket event handling here",
      "</script>",
      "$0"
    ],
    "description": "Creates a Socket.io client template."
  },

  // WebSocket Server Template
  "WebSocket Server Template": {
    "prefix": "websocketserver",
    "body": [
      "// WebSocket Server Template",
      "const WebSocket = require('ws');",
      "const wss = new WebSocket.Server({ port: 8080 });",
      "wss.on('connection', (ws) => {",
      "  console.log('A client connected');",
      "  ws.on('message', (message) => {",
      "    console.log(`Received: ${message}`);",
      "    // Handle WebSocket messages here",
      "  });",
      "  ws.on('close', () => {",
      "    console.log('A client disconnected');",
      "  });",
      "});",
      "$0"
    ],
    "description": "Creates a WebSocket server template."
  },

  // WebSocket Client Template
  "WebSocket Client Template": {
    "prefix": "websocketclient",
    "body": [
      "// WebSocket Client Template",
      "const WebSocket = require('ws');",
      "const ws = new WebSocket('ws://localhost:8080');",
      "ws.on('open', () => {",
      "  console.log('Connected to WebSocket server');",
      "});",
      "ws.on('message', (message) => {",
      "  console.log(`Received: ${message}`);",
      "  // Handle WebSocket messages here",
      "});",
      "$0"
    ],
    "description": "Creates a WebSocket client template."
  },

  // Node.js REST API Route Template
  "Node.js REST API Route": {
    "prefix": "nodejsroute",
    "body": [
      "// Node.js REST API Route Template",
      "const express = require('express');",
      "const router = express.Router();",
      "",
      "// Define API routes here",
      "router.get('/', (req, res) => {",
      "  // Handle GET request",
      "});",
      "",
      "router.post('/', (req, res) => {",
      "  // Handle POST request",
      "});",
      "",
      "router.put('/:id', (req, res) => {",
      "  // Handle PUT request",
      "});",
      "",
      "router.delete('/:id', (req, res) => {",
      "  // Handle DELETE request",
      "});",
      "",
      "module.exports = router;",
      "$0"
    ],
    "description": "Creates a Node.js REST API route template."
  },

  // Dockerfile for Node.js Template
  "Dockerfile for Node.js": {
    "prefix": "dockerfilenodejs",
    "body": [
      "// Dockerfile for Node.js Template",
      "FROM node:14",
      "WORKDIR /app",
      "COPY package*.json ./",
      "RUN npm install",
      "COPY . .",
      "EXPOSE 3000",
      "CMD [\"node\", \"index.js\"]",
      "$0"
    ],
    "description": "Creates a Dockerfile for Node.js template."
  },

  // AWS Lambda Function in Node.js Template
  "AWS Lambda Function in Node.js": {
    "prefix": "awslambda",
    "body": [
      "// AWS Lambda Function in Node.js Template",
      "exports.handler = async (event, context) => {",
      "  try {",
      "    // Lambda function logic here",
      "    return { statusCode: 200, body: 'Lambda function executed successfully' };",
      "  } catch (error) {",
      "    return { statusCode: 500, body: 'Error executing Lambda function' };",
      "  }",
      "};",
      "$0"
    ],
    "description": "Creates an AWS Lambda function template in Node.js."
  },

  // MongoDB CRUD Operations Template
  "MongoDB CRUD Operations": {
    "prefix": "mongodbcrud",
    "body": [
      "// MongoDB CRUD Operations Template",
      "const MongoClient = require('mongodb').MongoClient;",
      "const url = 'mongodb://localhost:27017';",
      "const dbName = 'mydb';",
      "",
      // Include CRUD operations for MongoDB here
      "$0"
    ],
    "description": "Creates a template for MongoDB CRUD operations."
  },

  // Mocha Test Template
  "Mocha Test Template": {
    "prefix": "mochatest",
    "body": [
      "// Mocha Test Template",
      "const assert = require('assert');",
      "",
      "describe('My Test Suite', () => {",
      "  it('should do something', () => {",
      "    assert.strictEqual(1 + 1, 2);",
      "  });",
      "  // Add more test cases here",
      "});",
      "$0"
    ],
    "description": "Creates a Mocha test template."
  },

  // Express.js Server Template
  "Express.js Server Template": {
    "prefix": "expressserver",
    "body": [
      "// Express.js Server Template",
      "const express = require('express');",
      "const app = express();",
      "const port = 3000;",
      "",
      "app.get('/', (req, res) => {",
      "  res.send('Hello, World!');",
      "});",
      "",
      "app.listen(port, () => {",
      "  console.log(`Server is listening on port ${port}`);",
      "});",
      "$0"
    ],
    "description": "Creates an Express.js server template."
  },

  // Custom Error Class Template
  "Custom Error Class Template": {
    "prefix": "customerror",
    "body": [
      "// Custom Error Class Template",
      "class MyCustomError extends Error {",
      "  constructor(message) {",
      "    super(message);",
      "    this.name = 'MyCustomError';",
      "  }",
      "}",
      "$0"
    ],
    "description": "Creates a template for a custom error class."
  },

  // User Registration Template
  "User Registration Template": {
    "prefix": "userregistration",
    "body": [
      "// User Registration Template",
      "// Implement user registration logic here",
      "$0"
    ],
    "description": "Creates a template for user registration logic."
  },

  // Common Dependencies in package.json
  "Common Dependencies in package.json": {
    "prefix": "commondependencies",
    "body": [
      "// Common Dependencies in package.json",
      "{",
      "  \"name\": \"my-app\",",
      "  \"version\": \"1.0.0\",",
      "  \"dependencies\": {",
      "    \"express\": \"^4.17.1\",",
      "    \"mongoose\": \"^5.11.15\",",
      "    // Add other dependencies here",
      "  },",
      "  \"devDependencies\": {",
      "    \"nodemon\": \"^2.0.6\",",
      "    \"mocha\": \"^8.3.2\",",
      "    // Add other devDependencies here",
      "  }",
      "}",
      "$0"
    ],
    "description": "Creates a template for common dependencies in package.json."
  },

  // ESLint Configuration Template
  "ESLint Configuration": {
    "prefix": "eslintconfig",
    "body": [
      "// ESLint Configuration Template",
      "{",
      "  \"extends\": \"eslint:recommended\",",
      "  \"parserOptions\": {",
      "    \"ecmaVersion\": 2021",
      "  },",
      "  \"rules\": {",
      "    // Define ESLint rules here",
      "  }",
      "}",
      "$0"
    ],
    "description": "Creates a template for ESLint configuration."
  }
}
